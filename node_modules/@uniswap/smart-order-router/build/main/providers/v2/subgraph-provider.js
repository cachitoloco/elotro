"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.V2SubgraphProvider = void 0;
const sdk_core_1 = require("@uniswap/sdk-core");
const async_retry_1 = __importDefault(require("async-retry"));
const await_timeout_1 = __importDefault(require("await-timeout"));
const graphql_request_1 = require("graphql-request");
const lodash_1 = __importDefault(require("lodash"));
const log_1 = require("../../util/log");
const metric_1 = require("../../util/metric");
const SUBGRAPH_URL_BY_CHAIN = {
    [sdk_core_1.ChainId.MAINNET]: 'https://api.thegraph.com/subgraphs/name/ianlapham/uniswap-v2-dev',
};
const PAGE_SIZE = 1000; // 1k is max possible query size from subgraph.
class V2SubgraphProvider {
    constructor(chainId, retries = 2, timeout = 360000, rollback = true, pageSize = PAGE_SIZE, trackedEthThreshold = 0.025, untrackedUsdThreshold = Number.MAX_VALUE, subgraphUrlOverride) {
        var _a;
        this.chainId = chainId;
        this.retries = retries;
        this.timeout = timeout;
        this.rollback = rollback;
        this.pageSize = pageSize;
        this.trackedEthThreshold = trackedEthThreshold;
        this.untrackedUsdThreshold = untrackedUsdThreshold;
        this.subgraphUrlOverride = subgraphUrlOverride;
        const subgraphUrl = (_a = this.subgraphUrlOverride) !== null && _a !== void 0 ? _a : SUBGRAPH_URL_BY_CHAIN[this.chainId];
        if (!subgraphUrl) {
            throw new Error(`No subgraph url for chain id: ${this.chainId}`);
        }
        this.client = new graphql_request_1.GraphQLClient(subgraphUrl);
    }
    async getPools(_tokenIn, _tokenOut, providerConfig) {
        const beforeAll = Date.now();
        let blockNumber = (providerConfig === null || providerConfig === void 0 ? void 0 : providerConfig.blockNumber)
            ? await providerConfig.blockNumber
            : undefined;
        log_1.log.info(`Getting V2 pools from the subgraph with page size ${this.pageSize}${(providerConfig === null || providerConfig === void 0 ? void 0 : providerConfig.blockNumber)
            ? ` as of block ${providerConfig === null || providerConfig === void 0 ? void 0 : providerConfig.blockNumber}`
            : ''}.`);
        // TODO: Remove. Temporary fix to ensure tokens without trackedReserveETH are in the list.
        const FEI = '0x956f47f50a910163d8bf957cf5846d573e7f87ca';
        const virtualTokenAddress = '0x0b3e328455c4059eeb9e3f84b5543f74e24e7e1b'.toLowerCase();
        // Define separate queries for each filtering condition
        // Note: GraphQL doesn't support OR conditions, so we need separate queries for each condition
        const queries = [
            // 1. FEI token pools - split into two queries since OR is not supported
            {
                name: 'FEI pools (token0)',
                query: (0, graphql_request_1.gql) `
          query getFEIPoolsToken0($pageSize: Int!, $id: String, $feiToken: String!) {
            pairs(
              first: $pageSize
              ${blockNumber ? `block: { number: ${blockNumber} }` : ``}
              where: { 
                id_gt: $id,
                token0: $feiToken
              }
            ) {
              id
              token0 { id, symbol }
              token1 { id, symbol }
              totalSupply
              trackedReserveETH
              reserveETH
              reserveUSD
            }
          }
        `,
                variables: { feiToken: FEI },
            },
            {
                name: 'FEI pools (token1)',
                query: (0, graphql_request_1.gql) `
          query getFEIPoolsToken1($pageSize: Int!, $id: String, $feiToken: String!) {
            pairs(
              first: $pageSize
              ${blockNumber ? `block: { number: ${blockNumber} }` : ``}
              where: { 
                id_gt: $id,
                token1: $feiToken
              }
            ) {
              id
              token0 { id, symbol }
              token1 { id, symbol }
              totalSupply
              trackedReserveETH
              reserveETH
              reserveUSD
            }
          }
        `,
                variables: { feiToken: FEI },
            },
            // 2. Virtual pair pools (only for BASE chain) - split into two queries
            ...(this.chainId === sdk_core_1.ChainId.BASE
                ? [
                    {
                        name: 'Virtual pair pools (token0)',
                        query: (0, graphql_request_1.gql) `
            query getVirtualPoolsToken0($pageSize: Int!, $id: String, $virtualToken: String!) {
              pairs(
                first: $pageSize
                ${blockNumber ? `block: { number: ${blockNumber} }` : ``}
                where: { 
                  id_gt: $id,
                  token0: $virtualToken
                }
              ) {
                id
                token0 { id, symbol }
                token1 { id, symbol }
                totalSupply
                trackedReserveETH
                reserveETH
                reserveUSD
              }
            }
          `,
                        variables: { virtualToken: virtualTokenAddress },
                    },
                    {
                        name: 'Virtual pair pools (token1)',
                        query: (0, graphql_request_1.gql) `
            query getVirtualPoolsToken1($pageSize: Int!, $id: String, $virtualToken: String!) {
              pairs(
                first: $pageSize
                ${blockNumber ? `block: { number: ${blockNumber} }` : ``}
                where: { 
                  id_gt: $id,
                  token1: $virtualToken
                }
              ) {
                id
                token0 { id, symbol }
                token1 { id, symbol }
                totalSupply
                trackedReserveETH
                reserveETH
                reserveUSD
              }
            }
          `,
                        variables: { virtualToken: virtualTokenAddress },
                    },
                ]
                : []),
            // 3. High tracked reserve ETH pools
            {
                name: 'High tracked reserve ETH pools',
                query: (0, graphql_request_1.gql) `
          query getHighTrackedReservePools($pageSize: Int!, $id: String, $threshold: String!) {
            pairs(
              first: $pageSize
              ${blockNumber ? `block: { number: ${blockNumber} }` : ``}
              where: { 
                id_gt: $id,
                trackedReserveETH_gt: $threshold
              }
            ) {
              id
              token0 { id, symbol }
              token1 { id, symbol }
              totalSupply
              trackedReserveETH
              reserveETH
              reserveUSD
            }
          }
        `,
                variables: { threshold: this.trackedEthThreshold.toString() },
            },
            // 4. High untracked USD pools
            {
                name: 'High untracked USD pools',
                query: (0, graphql_request_1.gql) `
          query getHighUSDReservePools($pageSize: Int!, $id: String, $threshold: String!) {
            pairs(
              first: $pageSize
              ${blockNumber ? `block: { number: ${blockNumber} }` : ``}
              where: { 
                id_gt: $id,
                reserveUSD_gt: $threshold
              }
            ) {
              id
              token0 { id, symbol }
              token1 { id, symbol }
              totalSupply
              trackedReserveETH
              reserveETH
              reserveUSD
            }
          }
        `,
                variables: { threshold: this.untrackedUsdThreshold.toString() },
            },
        ];
        let allPools = [];
        let outerRetries = 0;
        await (0, async_retry_1.default)(async () => {
            const timeout = new await_timeout_1.default();
            const fetchPoolsForQuery = async (queryConfig) => {
                let lastId = '';
                let pools = [];
                let poolsPage = [];
                let totalPages = 0;
                let retries = 0;
                do {
                    totalPages += 1;
                    const start = Date.now();
                    log_1.log.info(`Starting fetching for ${queryConfig.name} page ${totalPages} with page size ${this.pageSize}`);
                    await (0, async_retry_1.default)(async () => {
                        const before = Date.now();
                        const poolsResult = await this.client.request(queryConfig.query, Object.assign({ pageSize: this.pageSize, id: lastId }, queryConfig.variables));
                        metric_1.metric.putMetric(`V2SubgraphProvider.chain_${this.chainId}.getPools.${queryConfig.name
                            .replace(/\s+/g, '_')
                            .toLowerCase()}.paginate.latency`, Date.now() - before);
                        poolsPage = poolsResult.pairs;
                        pools = pools.concat(poolsPage);
                        if (pools.length > 0) {
                            lastId = pools[pools.length - 1].id;
                        }
                        metric_1.metric.putMetric(`V2SubgraphProvider.chain_${this.chainId}.getPools.${queryConfig.name
                            .replace(/\s+/g, '_')
                            .toLowerCase()}.paginate.pageSize`, poolsPage.length);
                    }, {
                        retries: this.retries,
                        onRetry: (err, retry) => {
                            retries += 1;
                            log_1.log.error({ err, lastId }, `Failed request for ${queryConfig.name} page of pools from subgraph. Retry attempt: ${retry}. LastId: ${lastId}`);
                        },
                    });
                    log_1.log.info(`Fetched ${poolsPage.length} pools for ${queryConfig.name} in ${Date.now() - start}ms`);
                } while (poolsPage.length > 0);
                metric_1.metric.putMetric(`V2SubgraphProvider.chain_${this.chainId}.getPools.${queryConfig.name
                    .replace(/\s+/g, '_')
                    .toLowerCase()}.paginate`, totalPages);
                metric_1.metric.putMetric(`V2SubgraphProvider.chain_${this.chainId}.getPools.${queryConfig.name
                    .replace(/\s+/g, '_')
                    .toLowerCase()}.pairs.length`, pools.length);
                metric_1.metric.putMetric(`V2SubgraphProvider.chain_${this.chainId}.getPools.${queryConfig.name
                    .replace(/\s+/g, '_')
                    .toLowerCase()}.paginate.retries`, retries);
                return pools;
            };
            try {
                // Fetch pools for each query in parallel
                const poolPromises = queries.map((queryConfig) => fetchPoolsForQuery(queryConfig));
                const allPoolsArrays = await Promise.all(poolPromises);
                // Merge all results and deduplicate by pool ID
                const poolMap = new Map();
                allPoolsArrays.forEach((pools) => {
                    pools.forEach((pool) => {
                        poolMap.set(pool.id, pool);
                    });
                });
                allPools = Array.from(poolMap.values());
                const getPoolsPromise = Promise.resolve(allPools);
                const timerPromise = timeout.set(this.timeout).then(() => {
                    throw new Error(`Timed out getting pools from subgraph: ${this.timeout}`);
                });
                allPools = await Promise.race([getPoolsPromise, timerPromise]);
                return;
            }
            catch (err) {
                log_1.log.error({ err }, 'Error fetching V2 Subgraph Pools.');
                throw err;
            }
            finally {
                timeout.clear();
            }
        }, {
            retries: this.retries,
            onRetry: (err, retry) => {
                outerRetries += 1;
                if (this.rollback &&
                    blockNumber &&
                    lodash_1.default.includes(err.message, 'indexed up to')) {
                    metric_1.metric.putMetric(`V2SubgraphProvider.chain_${this.chainId}.getPools.indexError`, 1);
                    blockNumber = blockNumber - 10;
                    log_1.log.info(`Detected subgraph indexing error. Rolled back block number to: ${blockNumber}`);
                }
                metric_1.metric.putMetric(`V2SubgraphProvider.chain_${this.chainId}.getPools.timeout`, 1);
                allPools = [];
                log_1.log.info({ err }, `Failed to get pools from subgraph. Retry attempt: ${retry}`);
            },
        });
        metric_1.metric.putMetric(`V2SubgraphProvider.chain_${this.chainId}.getPools.retries`, outerRetries);
        // Apply the same filtering logic to ensure consistency
        const beforeFilter = Date.now();
        const poolsSanitized = allPools
            .filter((pool) => {
            return (pool.token0.id == FEI ||
                pool.token1.id == FEI ||
                this.isVirtualPairBaseV2Pool(pool) ||
                parseFloat(pool.trackedReserveETH) > this.trackedEthThreshold ||
                parseFloat(pool.reserveUSD) > this.untrackedUsdThreshold);
        })
            .map((pool) => {
            return {
                id: pool.id.toLowerCase(),
                token0: {
                    id: pool.token0.id.toLowerCase(),
                },
                token1: {
                    id: pool.token1.id.toLowerCase(),
                },
                supply: parseFloat(pool.totalSupply),
                reserve: parseFloat(pool.trackedReserveETH),
                reserveUSD: parseFloat(pool.reserveUSD),
            };
        });
        metric_1.metric.putMetric(`V2SubgraphProvider.chain_${this.chainId}.getPools.filter.latency`, Date.now() - beforeFilter);
        metric_1.metric.putMetric(`V2SubgraphProvider.chain_${this.chainId}.getPools.untracked.length`, poolsSanitized.length);
        metric_1.metric.putMetric(`V2SubgraphProvider.chain_${this.chainId}.getPools.untracked.percent`, (poolsSanitized.length / allPools.length) * 100);
        metric_1.metric.putMetric(`V2SubgraphProvider.chain_${this.chainId}.getPools`, 1);
        metric_1.metric.putMetric(`V2SubgraphProvider.chain_${this.chainId}.getPools.latency`, Date.now() - beforeAll);
        log_1.log.info(`Got ${allPools.length} V2 pools from the subgraph (after deduplication). ${poolsSanitized.length} after filtering`);
        return poolsSanitized;
    }
    // This method checks if a given pool contains the VIRTUAL token.
    isVirtualPairBaseV2Pool(pool) {
        const virtualTokenAddress = '0x0b3e328455c4059eeb9e3f84b5543f74e24e7e1b'.toLowerCase();
        return (this.chainId === sdk_core_1.ChainId.BASE &&
            (pool.token0.id.toLowerCase() === virtualTokenAddress ||
                pool.token1.id.toLowerCase() === virtualTokenAddress));
    }
}
exports.V2SubgraphProvider = V2SubgraphProvider;
//# sourceMappingURL=data:application/json;base64,