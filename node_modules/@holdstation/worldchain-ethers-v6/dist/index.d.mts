import { Client, FilterLogs, OnchainTransaction, Result, AbiCodec, Multicall3, Aggregate, Aggregate3 } from '@holdstation/worldchain-sdk';
import { ethers } from 'ethers';

declare class EthersClient implements Client {
    private readonly provider;
    private _chainId;
    constructor(provider: ethers.JsonRpcProvider);
    name(): string;
    isValidAddress(address: string): boolean;
    hexZeroPad(value: string, length: number): string;
    getBlockNumber(): Promise<number>;
    getChainId(): number;
    getProvider(): ethers.JsonRpcProvider;
    getLogs(filter: Partial<FilterLogs["request"]>): Promise<FilterLogs["response"][]>;
    getTransaction(hash: string): Promise<OnchainTransaction>;
    encodeFunctionData(abi: string[], method: string, values?: any[]): string;
    decodeFunctionResult(abi: string[], method: string, data: string): Result;
    codec(abi: any): AbiCodec;
}

declare class EthersCodec implements AbiCodec {
    private iface;
    constructor(abi: any[]);
    encodeFunctionData(fnName: string, args?: unknown[]): string;
    decodeFunctionResult(fnName: string, data: string): ethers.Result;
}

declare class EthersMulticall3 implements Multicall3 {
    private readonly contract;
    constructor(provider: ethers.JsonRpcProvider);
    aggregate(calls: Aggregate["request"][]): Promise<Aggregate["response"]>;
    aggregate3(calls: Aggregate3["request"][]): Promise<Aggregate3["response"][]>;
}

export { EthersClient as Client, EthersCodec as Codec, EthersMulticall3 as Multicall3 };
