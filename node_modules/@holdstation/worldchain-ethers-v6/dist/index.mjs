import {logger,config,abi}from'@holdstation/worldchain-sdk';import {ethers}from'ethers';var n=class{iface;constructor(e){this.iface=new ethers.Interface(e);}encodeFunctionData(e,t=[]){return this.iface.encodeFunctionData(e,t)}decodeFunctionResult(e,t){return this.iface.decodeFunctionResult(e,t)}};var i=class{constructor(e){this.provider=e;e?._network?.chainId?this._chainId=Number(e._network.chainId):(logger.warn("ChainId is not set, please set it by using `ethers.JsonRpcProvider`"),this.provider.getNetwork().then(t=>this._chainId=Number(t.chainId)).catch(t=>logger.error("Error getting chainId",t)));}_chainId=0;name(){return "ethers-client"}isValidAddress(e){return ethers.isAddress(e)}hexZeroPad(e,t){let r=e;return r.startsWith("0x")||(r="0x"+r),ethers.zeroPadValue(e,t)}async getBlockNumber(){return this.provider.getBlockNumber()}getChainId(){return this._chainId}getProvider(){return this.provider}async getLogs(e){return (await this.provider.getLogs(e)).map(r=>({blockNumber:r.blockNumber,blockHash:r.blockHash,transactionIndex:r.transactionIndex,removed:r.removed,address:r.address,data:r.data,topics:r.topics.map(s=>s.toString()),transactionHash:r.transactionHash,logIndex:r.index}))}async getTransaction(e){let t=await this.provider.getTransaction(e);if(!t)throw new Error(`Transaction with hash ${e} not found`);return {hash:t.hash,to:t.to??void 0,from:t.from,nonce:t.nonce,gasLimit:t.gasLimit.toString(),gasPrice:t.gasPrice?.toString(),data:t.data,value:t.value.toString(),blockNumber:t.blockNumber??void 0,blockHash:t.blockHash??void 0,timestamp:void 0}}encodeFunctionData(e,t,r){return new ethers.Interface(e).encodeFunctionData(t,r)}decodeFunctionResult(e,t,r){return new ethers.Interface(e).decodeFunctionResult(t,r)}codec(e){return new n(e)}};var o=class{contract;constructor(e){this.contract=new ethers.Contract(config.multicall3Address,abi.MULTICALL3_JSONABI,e);}async aggregate(e){let[t,r]=await this.contract.aggregate(e);return [Number(t),r]}async aggregate3(e){return (await this.contract.aggregate3(e)).map(r=>({returnData:r.returnData,success:r.success}))}};export{i as Client,n as Codec,o as Multicall3};//# sourceMappingURL=index.mjs.map
//# sourceMappingURL=index.mjs.map